{"version":3,"sources":["assets/cancel.svg","components/stock/index.js","components/currency/index.js","components/Chart/index.js","components/graph/index.js","components/portfolio/index.js","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","index","react_default","a","createElement","key","this","props","id","stockName","purchaseValue","currencySign","quantity","currentValue","totalValue","purchaseDate","react_svg_esm","src","Cancel","onClick","delete","Component","value","currencyOption","onChange","changeData","datas","dataToSend","stockNames","custom_array","i","length","upperCase","toUpperCase","formatData","name","color","get_random_color","data","chart","push","c","hex","Math","floor","random","toString","String","substr","filteredArray","filterGraphData","es6","width","height","margin","top","right","left","bottom","dataKey","tick","allowDuplicatedCategory","map","item","type","stroke","Index","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","graphDraw","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","fetchedValue","wrap","_context","prev","next","fetchingData","sent","t0","console","log","setState","stop","_x","apply","arguments","state","timeSelected","filterStockNames","handleTimeChange","bind","assertThisInitialized","range","fetchDataUrl","fetch","response_currentValue","json","stockArray","portfolioId","post","portfolioID","toConsumableArray","Set","defineProperty","target","chartDialog","react","Chart","dialog","className","portfolioName","onClose","handleFormChange","evt","handleAdd","cparray","total","last_id","preventDefault","stockID","assign","JSON","parse","localStorage","getItem","toFixed","ids","datePurchase","setItem","stringify","parseInt","alert","portfolioValue","calculateTotalValue","handleDelete","list","splice","handleShowGraph","showGraph","initialState","handleCurrencyChange","hanleAdd","hanleShowGraph","changeCurrency","curr","unit","portfolioTotal","posts","array","parseFloat","apiKey","url","dateFormat","split","join","currentValueUrl","purchaseValueUrl","response_purchaseValue","uHigh","_this2","_this$state","isEnabled","view","currency_index","stock_index","ref","style","overflow","placeholder","disabled","graph","components_graph","App","handlePortfolioName","handleSubmit","postID","users","handleFormReset","stockData","modifiedStockData","filter","stock","onSubmit","components_portfolio","usersArray","ReactDOM","render","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.f53b84bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cancel.b6512207.svg\";","import React, { Component } from 'react'\r\nimport ReactSVG from 'react-svg'\r\nimport Cancel from '../../assets/cancel.svg';\r\nimport './stock.css';\r\n\r\nexport default class index extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <tbody>\r\n                    <tr key={this.props.key}>\r\n                        <td id=\"name\">{this.props.stockName} </td>\r\n                        <td>{this.props.purchaseValue}{this.props.currencySign}</td>\r\n                        <td>{this.props.quantity}</td>\r\n                        <td>{this.props.currentValue}{this.props.currencySign}</td>\r\n                        <td>{this.props.totalValue}{this.props.currencySign}</td>\r\n                        <td>{this.props.purchaseDate}</td>\r\n                        <td>  <div>\r\n                        <ReactSVG id=\"cancel\" src={Cancel} onClick={this.props.delete} />\r\n\r\n                    </div></td>\r\n                    </tr>\r\n                </tbody>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class index extends Component {\r\n   \r\n    render() {\r\n        return (\r\n            <div>\r\n                <select value={this.props.currencyOption} onChange={this.props.changeData}>\r\n                    <option value=\"EUR\">EUR</option>\r\n                    <option value=\"USD\">USD</option>\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport './chart.css';\r\n\r\nclass index extends Component {\r\n\r\n  //Function to filter the graphdata and format it in Recharts format\r\n  filterGraphData() {\r\n    const datas = this.props.dataToSend; //Receiving the fetched value from graph component\r\n    const stockNames = this.props.stockNames; //Receiving all the stocknames from graph component\r\n\r\n    let custom_array = []\r\n    if (custom_array !== null) {\r\n      custom_array = []; //Making sure that this array is always empty\r\n    }\r\n\r\n    for (var i = 0; i < stockNames.length; i++) {\r\n      let upperCase = stockNames[i].toUpperCase();   // Changing received stocknames from lowercase to uppercase, because the sends data in Uppercase format\r\n   \r\n      let formatData = {  //This array consists of formatted data needed to draw recharts\r\n        name: upperCase, //Inserting name \r\n        color: this.get_random_color(), //Inserting random unique color to the stock\r\n        data: datas[upperCase].chart //Formating the data and assigning to this element\r\n      }\r\n\r\n      custom_array.push(formatData); //Pushing the formatted data to custom array\r\n    }\r\n    return custom_array; //Returns custom_array\r\n  }\r\n\r\n  //Function to generate random color\r\n  get_random_color() {\r\n    function c() {\r\n      var hex = Math.floor(Math.random() * 256).toString(16);\r\n      return (\"0\" + String(hex)).substr(-2); // pad with zero\r\n    }\r\n    return \"#\" + c() + c() + c();\r\n  }\r\n\r\n\r\n  render() {\r\n    const filteredArray = this.filterGraphData() //Filtering data on render\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"80%\" height={400}> \r\n        <LineChart                                               //Linechart from recharts\r\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n\r\n          <XAxis dataKey=\"label\" tick={false} allowDuplicatedCategory={false} />\r\n          <YAxis dataKey=\"uClose\" />\r\n          <Tooltip />\r\n          <Legend />\r\n\r\n          {filteredArray.map(item => (                //Using linecharts, LinechartHasMultiSeries to draw multiple lines\r\n            <Line type=\"monotone\" dataKey=\"uClose\" data={item.data} name={item.name} key={item.name} stroke={item.color} />\r\n          ))}\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default index;","import React, { Component, Fragment } from 'react';\r\nimport './graph.css';\r\nimport Cancel from '../../assets/cancel.svg';\r\nimport ReactSVG from 'react-svg';\r\nimport Chart from '../../components/Chart';\r\n\r\n\r\nclass Index extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            timeSelected: \"5d\",    //By defaulting 5 days set\r\n            fetchedValue: [],\r\n            stockNames: [],\r\n\r\n        };\r\n        this.state.stockNames = this.filterStockNames(); //Filtering the stocknames on the fly when this component is called\r\n        this.handleTimeChange = this.handleTimeChange.bind(this);\r\n        this.graphDraw = this.graphDraw.bind(this);\r\n    }\r\n\r\n   //Handles the graph drawing feature\r\n    graphDraw = async (event) => {\r\n        try {\r\n            var fetchedValue = await this.fetchingData(); //Waiting for fetching data to send the data\r\n        }\r\n        catch (error) {\r\n            console.log(error);  //Catching error\r\n        }\r\n\r\n        this.setState({\r\n            fetchedValue: fetchedValue\r\n        })\r\n\r\n    }\r\n   \r\n    //Function to fetch the data\r\n    async fetchingData() {\r\n\r\n        const test_apiKey = \"Tpk_3f5f6e08c5864242aa0503c8d2ef115a\"; //API key\r\n        const test_url = \"https://sandbox.iexapis.com/stable/stock/market/batch?symbols=\"; //Default url\r\n        const range = this.state.timeSelected; //Selecting the selected time range\r\n        const stockNames = this.state.stockNames; //Filter stocknames collection\r\n\r\n        if (stockNames !== \"\" || stockNames.length !== 0) { //Checking if stocknames is not empty\r\n            const fetchDataUrl = test_url + stockNames.toString() + \"&types=chart&filter=uClose,date,label&range=\" + range + \"&last=5&token=\" + test_apiKey;\r\n            //Getting the current Value from the URL\r\n            const response_currentValue = await fetch(fetchDataUrl);\r\n            const fetchedValue = await response_currentValue.json();\r\n            return await\r\n                fetchedValue\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    //Function filters the stockname from the clicked component and removes the duplicate stocknames\r\n    filterStockNames() {\r\n        let stockNames = [];//Initializing empty array\r\n        const stockArray = this.props.stockArray //Getting all the stock array\r\n\r\n        const portfolioId = this.props.portfolioId //Getting portfolioID to filter data\r\n        const filterData = stockArray.map(post => {\r\n            if (post !== null && post.portfolioID === portfolioId) {\r\n                stockNames.push(post.stockName); //This filters only stocknames from whole stock array\r\n            }\r\n        })\r\n\r\n        let unique_stockname = [...new Set(stockNames)] //It filters and removes duplicated stocknames\r\n\r\n        return unique_stockname;\r\n\r\n    }\r\n    //Handles the time range selection drop down menu\r\n    handleTimeChange(event) {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.graphDraw() //Draws the graph when component is mounted\r\n    }\r\n    render() {\r\n        const { fetchedValue } = this.state;\r\n        let chartDialog;\r\n        if (fetchedValue.length !== 0) { //Showing the chart only when there is some fetched values\r\n            chartDialog = (\r\n                <Fragment>\r\n                    <Chart        //Calling chart component\r\n                        dataToSend={fetchedValue}\r\n                        stockNames={this.state.stockNames}\r\n                    ></Chart>\r\n                </Fragment>)\r\n        } \r\n\r\n        let dialog = ( //Default container which contains chart , time range and draw button\r\n            <div className=\"mainContainer\">\r\n                <div className=\"graphContainer\">\r\n                    <div className=\"portfolioName\">\r\n                        <span>{this.props.portfolioName} performance chart</span>\r\n                        <ReactSVG id=\"cancel\" src={Cancel} onClick={this.props.onClose} />\r\n                    </div>\r\n\r\n                    <br></br>\r\n                    <div className=\"graphCollection\">\r\n                        {chartDialog}\r\n\r\n                    </div>\r\n                    <div className=\"timeCollection\">\r\n                        <div>\r\n                            <span>Time Interval </span>\r\n                            <select name=\"timeSelected\" onChange={this.handleTimeChange}>\r\n                                <option value=\"5d\">5 days</option>\r\n                                <option value=\"1m\">1 month</option>\r\n                                <option value=\"3m\">3 month</option>\r\n                                <option value=\"6m\">6 month</option>\r\n                                <option value=\"1y\">1 year</option>\r\n                                <option value=\"2y\">2 year</option>\r\n                                <option value=\"5y\">5 year</option>\r\n                            </select>\r\n                        </div>\r\n                        <button className=\"buttonAdd\" onClick={this.graphDraw}>Draw</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {dialog} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;","/* eslint-disable no-unused-expressions */\r\nimport React, { Component, Fragment } from 'react';\r\nimport ReactSVG from 'react-svg'\r\nimport './portfolio.css';\r\nimport '../App.css';\r\nimport Cancel from '../../assets/cancel.svg';\r\nimport Stock from '../../components/stock';\r\nimport Currency from '../../components/currency';\r\nimport Graph from '../../components/graph';\r\n\r\nclass index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.stockID = 0; //Setting stating stock id\r\n\r\n        this.initialState = {\r\n            portfolioID: '',\r\n            ids: '',\r\n            stockName: '',\r\n            datePurchase: '',\r\n            purchaseValue: '',\r\n            currentValue: '',\r\n            quantity: '',\r\n            totalValue: '',\r\n            portfolioValue: '',\r\n            stockArray: [],\r\n            currencyOption: 'EUR',\r\n            currencySign: '€',\r\n            showGraph: false,\r\n\r\n        };\r\n            \r\n        this.state = this.initialState\r\n        this.state.portfolioValue = this.calculateTotalValue(); //Calculating portfolio value on the fly\r\n\r\n        //Binding all the functions\r\n        this.handleCurrencyChange = this.handleCurrencyChange.bind(this);\r\n        this.hanleAdd = this.handleAdd.bind(this);\r\n        this.hanleShowGraph = this.handleShowGraph.bind(this);\r\n        this.handleFormChange = this.handleFormChange.bind(this);\r\n\r\n    }\r\n    \r\n    //Function toggles the currency option\r\n    handleCurrencyChange(event) {\r\n        this.setState({ currencyOption: event.target.value }); //Sets the selected currency option\r\n        this.changeCurrency(event.target.value) //call the change currency function \r\n    }\r\n\r\n    //Function changes the currency according to the selected the currency option\r\n    changeCurrency(curr) {\r\n        const usd_rate = 1.10 //Setting default change rate\r\n        const cparray = Object.assign([], this.state.stockArray); // Getting the stock data to convert\r\n\r\n\r\n        let unit = []; //creating empty array\r\n        const portfolioTotal = this.state.portfolioValue;//Getting the current portfolio value\r\n       \r\n        //switching between the currencies\r\n        switch (curr) {\r\n            case \"USD\":\r\n                unit.length = 0; \r\n                \r\n                //Changing the stock's value on the fly\r\n                cparray.map((posts) => {\r\n                    let array = {\r\n                        \"purchaseValue\": (posts.purchaseValue * usd_rate).toFixed(2),\r\n                        \"currentValue\": (posts.currentValue * usd_rate).toFixed(2),\r\n                        \"totalValue\": (posts.totalValue * usd_rate).toFixed(2),\r\n                    }\r\n                    unit.push(array);\r\n                })\r\n\r\n                this.setState({\r\n                    currencySign: \"$\",  //Setting the state of sign according to the selected currency\r\n                    portfolioValue: (portfolioTotal * usd_rate).toFixed(2) //Changing the portfolio's total value also\r\n\r\n                }\r\n                );\r\n\r\n                break;\r\n                //Switching for similar things to EURO\r\n            case \"EUR\":\r\n                unit.length = 0;\r\n                cparray.map((posts) => {\r\n\r\n                    let array = {\r\n                        \"purchaseValue\": (posts.purchaseValue / usd_rate).toFixed(2),\r\n                        \"currentValue\": (posts.currentValue / usd_rate).toFixed(2),\r\n                        \"totalValue\": (posts.totalValue / usd_rate).toFixed(2),\r\n                    }\r\n                    unit.push(array);\r\n\r\n                })\r\n                this.setState({\r\n                    currencySign: \"€\",\r\n                    portfolioValue: (portfolioTotal / usd_rate).toFixed(2)\r\n                });\r\n                break;\r\n        }\r\n\r\n        //This method maps according to which currency is selected\r\n        cparray.map((posts, index) => {\r\n            unit.map((data, id) => {\r\n                if (index===id) { //it checks if the index is matched\r\n                        posts.purchaseValue = data.purchaseValue,\r\n                        posts.currentValue = data.currentValue,\r\n                        posts.totalValue = data.totalValue\r\n\r\n                }\r\n            })\r\n\r\n        })\r\n        this.setState({\r\n            stockArray: cparray,\r\n        })\r\n\r\n    }\r\n    //Function to calculate total value of the portfolio\r\n    calculateTotalValue() {\r\n        let cparray = Object.assign([], this.state.stockArray); //Copying the array's data\r\n        let data = JSON.parse(localStorage.getItem(\"stockData\"));\r\n\r\n        cparray = data; //setting the state of array from the local storage's data\r\n\r\n        if (cparray !== null) {\r\n\r\n            let total = 0;\r\n\r\n            for (var i = 0; i < cparray.length; i++) {\r\n                if (cparray[i].portfolioID === this.props.id) {\r\n                    total += parseFloat(cparray[i].totalValue);\r\n                }\r\n            }\r\n\r\n            return total.toFixed(2); //Returning the total value\r\n        }\r\n\r\n    }\r\n    //Function handles the input text and datefield and catches the data from them\r\n    handleFormChange = (evt) => {\r\n        this.setState({ [evt.target.name]: evt.target.value });\r\n    }\r\n\r\n    //Function adds the stock to the array\r\n    handleAdd = async (event) => {\r\n        event.preventDefault(); //preventing the page from refreshing when user clicks the add stock button\r\n\r\n        this.stockID = this.stockID + 1; //Creating unique ID\r\n\r\n        let cparray = Object.assign([], this.state.stockArray);\r\n\r\n        let data = JSON.parse(localStorage.getItem(\"stockData\"));\r\n        try {\r\n            var value = await this.fetchingData(); //waiting for the fetchingData function to send the data\r\n            const total = (this.state.quantity * value.currentValue).toFixed(2); //Calculating total for each stock according to it's quantity\r\n\r\n            if (data === null || data.length === 0) {\r\n                cparray.push({\r\n                    portfolioID: this.props.id,\r\n                    ids: this.stockID,\r\n                    stockName: this.state.stockName,\r\n                    datePurchase: this.state.datePurchase,\r\n                    quantity: this.state.quantity,\r\n                    currentValue: value.currentValue,\r\n                    purchaseValue: value.purchaseValue,\r\n                    totalValue: total\r\n\r\n                })\r\n\r\n                localStorage.setItem(\"stockData\", JSON.stringify(cparray));\r\n            }\r\n            else {\r\n                let last_id = parseInt(data[data.length - 1].ids); //Checking the last id from the stored stock, to create new unique id for new stock to be added\r\n                this.stockID = this.stockID + last_id;\r\n\r\n                cparray = data;\r\n                cparray.push({\r\n                    portfolioID: this.props.id,\r\n                    ids: this.stockID,\r\n                    stockName: this.state.stockName,\r\n                    datePurchase: this.state.datePurchase,\r\n                    quantity: this.state.quantity,\r\n                    currentValue: value.currentValue,\r\n                    purchaseValue: value.purchaseValue,\r\n                    totalValue: total\r\n\r\n                })\r\n                localStorage.setItem(\"stockData\", JSON.stringify(cparray));\r\n            }\r\n\r\n        }\r\n        catch (error) {\r\n            alert(\"Invalid format of data/ check that the dates are not the weekends? \");//Sending error if no data is available\r\n        }\r\n\r\n        this.setState({\r\n            stockArray: JSON.parse(localStorage.getItem(\"stockData\")),\r\n            portfolioValue: this.calculateTotalValue() //Calculating total portfoliovalue on the fly\r\n        })\r\n\r\n\r\n    }\r\n\r\n    //Function handles the deletion of each stocks seperately\r\n    handleDelete = (index) => {\r\n        \r\n        let list = JSON.parse(localStorage.getItem(\"stockData\"));\r\n        list.splice(index, 1); //Deleting the stock by it's index\r\n        this.setState({\r\n            stockArray: list,\r\n        })\r\n\r\n        this.setState((state) => ({\r\n            portfolioValue: this.calculateTotalValue() //Overriding the setstate method to recalculate total portfoliovalue after deletion of a stock\r\n        }));\r\n        localStorage.setItem(\"stockData\", JSON.stringify(list));\r\n    }\r\n\r\n    //Function fetches data from the server\r\n    async fetchingData() {\r\n        const apiKey = \"Tpk_3f5f6e08c5864242aa0503c8d2ef115a\";//API key\r\n        const url = \"https://sandbox.iexapis.com/stable/stock/\"; //Default sandbox url to fetch data\r\n        const dateFormat = this.state.datePurchase.split(\"-\").join(\"\"); //formatting the date to use in fetching\r\n        const stockName = this.state.stockName; //Getting the current stockname to fetch data\r\n        const currentValueUrl = url + stockName + \"/quote/latestPrice?token=\" + apiKey; //Custom url to fetch the latest stock price\r\n        const purchaseValueUrl = url + stockName + \"/chart/date/\" + dateFormat + \"?chartByDay=true&token=\" + apiKey;//Custom url to fetch from the inputted date\r\n\r\n        //Getting the current Value from the URL\r\n\r\n        const response_currentValue = await fetch(currentValueUrl);\r\n        const currentValue = await response_currentValue.json();\r\n\r\n        //Getting the purchase Value from the URL\r\n        const response_purchaseValue = await fetch(purchaseValueUrl);\r\n        const purchaseValue = await response_purchaseValue.json();\r\n        \r\n        //Returns the data when promise is resolved\r\n        return await {\r\n            currentValue: currentValue,\r\n            purchaseValue: purchaseValue[0].uHigh,\r\n        };\r\n\r\n\r\n    }\r\n   \r\n    //Toggle when user clicks the perf graph button\r\n    handleShowGraph = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showGraph: !this.state.showGraph\r\n        })\r\n    }\r\n    //Component mounted from the local storage\r\n    componentWillMount() {\r\n        let data = JSON.parse(localStorage.getItem(\"stockData\"));\r\n\r\n        if (data !== null) {\r\n\r\n            this.setState({\r\n                stockArray: data,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { stockArray, stockName, quantity, datePurchase, currencyOption, currencySign, showGraph } = this.state;\r\n        const isEnabled = (stockName.length && quantity.length && datePurchase.length) > 0; //Disbaling the add button when input field is empty\r\n\r\n        let view = (<div className=\"container\">\r\n        <div className=\"Header\">\r\n            <span>{this.props.name}</span>\r\n            <Currency currencyOption={currencyOption} changeData={this.handleCurrencyChange} ></Currency>\r\n            <div>\r\n                <ReactSVG id=\"cancel\" src={Cancel} onClick={this.props.delete} /> \r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"tableWrapper\">\r\n            <table id=\"customers\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Symbol</th>\r\n                        <th>Purchase Value</th>\r\n                        <th>Quantity</th>\r\n                        <th>Current Value</th>\r\n                        <th>Total Value</th>\r\n                        <th>Purchased Date</th>\r\n                        <th>Remove</th>\r\n                    </tr>\r\n                </thead>\r\n                <div>\r\n                    {stockArray.map((post, index) => {\r\n                        if (post !== null && post.portfolioID === this.props.id) {\r\n                            return (\r\n                                <Stock                  //Sending props to the stock component\r\n                                    key={post.ids}\r\n                                    stockName={post.stockName}\r\n                                    currentValue={post.currentValue}\r\n                                    purchaseValue={post.purchaseValue}\r\n                                    quantity={post.quantity}\r\n                                    totalValue={post.totalValue}\r\n                                    purchaseDate={post.datePurchase}\r\n                                    delete={this.handleDelete.bind(this, index)}\r\n                                    currencySign={currencySign}\r\n                                ></Stock>\r\n\r\n                            )\r\n                        }\r\n                    })}\r\n                </div>\r\n            </table>\r\n        </div>\r\n\r\n        <form ref=\"stock\">\r\n            <div className=\"tableWrapper\" style={{ overflow: \"hidden\" }}>\r\n\r\n                <input type=\"text\" name=\"stockName\" onChange={this.handleFormChange} placeholder=\"Symbol\" id=\"name\"></input>\r\n                <input type=\"date\" name=\"datePurchase\" onChange={this.handleFormChange} placeholder=\"Unit Value\"></input>\r\n                <input type=\"number\" name=\"quantity\" onChange={this.handleFormChange} placeholder=\"Quantity\"></input>\r\n\r\n            </div>\r\n            <div className=\"Header\" style={{ width: \"fit-content\" }}>\r\n                <span>Total value of {this.props.name} :<span id=\"amount\"></span> {this.state.portfolioValue}</span><span>{currencySign}</span>\r\n            </div>\r\n            <div className=\"Header\">\r\n                <button onClick={this.handleAdd} disabled={!isEnabled} className=\"button buttonAdd\" type=\"submit\">Add Stock</button>\r\n                <button onClick={this.handleShowGraph} className=\"button buttonAdd\" type=\"submit\">Perf graph</button>\r\n            </div>\r\n        </form>\r\n    </div>);\r\n     //Creating a graph variable to toggle when to show the graph component\r\n        let graph = (<div>\r\n            <Graph\r\n               \r\n                portfolioName={this.props.name}\r\n                portfolioId={this.props.id}\r\n                stockArray={stockArray}\r\n                onClose={this.handleShowGraph}\r\n            />\r\n        </div>)  ;\r\n        \r\n        if (showGraph) { //Checking if user presses the show graph button\r\n            return (\r\n                <Fragment>\r\n                    {view}\r\n                    {graph}\r\n                </Fragment>\r\n            );\r\n        } else { //By default showing only the index view \r\n            return view;\r\n        }   \r\n    }\r\n}\r\n\r\nexport default index;","/* eslint-disable no-unused-expressions */\r\nimport React, { Component } from 'react';\r\nimport Portfolio from './portfolio';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.postID=0;\r\n\r\n    /* Initialising initial state for the portfolio data*/\r\n    this.state = {\r\n      id:\"\",\r\n      portfolioName:'',\r\n      users: []\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);// Binds the add button to add the portfolio\r\n  }\r\n\r\n  //The below function changes the state of the text field of adding the portfolio\r\n  handlePortfolioName = (event) =>{\r\n   this.setState({\r\n     portfolioName:event.target.value\r\n   })\r\n  }\r\n\r\n  // This function handles the addition of portfolio\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.postID = this.postID + 1; //Changing the id of the portfolio to a unique id everytime new portfolio is added\r\n    let cparray = Object.assign([], this.state.users); //Copying the array of portfolios to add new portfolio to that one\r\n    const name = this.state.portfolioName;// getting the portfolioname\r\n    let data=JSON.parse(localStorage.getItem(\"portfolio\"));// gettting the portfolio array from the local storage\r\n    if (data===null||data.length===0) { // checking the condition inf there are any data in the local storage\r\n      cparray.push({                // pushing data to new array\r\n        id: this.postID, \r\n        portfolioName: name,\r\n  \r\n      })\r\n      localStorage.setItem(\"portfolio\", JSON.stringify(cparray)); // setting the  data to localstorage\r\n    }\r\n    else {\r\n      let  last_id = parseInt(data[data.length - 1].id);\r\n      this.postID=this.postID+last_id;\r\n      cparray = data;\r\n      cparray.push({\r\n         id: this.postID,\r\n         portfolioName: name,\r\n      })\r\n      localStorage.setItem(\"portfolio\", JSON.stringify(cparray));\r\n    }\r\n    this.setState({\r\n      name: \"\",\r\n      users: JSON.parse(localStorage.getItem(\"portfolio\")) //Setting the state of the newly changed localstorage to the state array\r\n    })\r\n    this.handleFormReset() // reseting the input field after a succesful entry\r\n\r\n  }\r\n\r\n  //This function handles the deletion of the portfolio\r\n  handleDelete = (index,id) => {\r\n    \r\n    let list = JSON.parse(localStorage.getItem(\"portfolio\"));\r\n\r\n    let stockData=JSON.parse(localStorage.getItem(\"stockData\"));\r\n    let modifiedStockData=[];\r\n   \r\n    if(stockData!==null){\r\n    modifiedStockData = stockData.filter(stock => {\r\n      return stock.portfolioID !==id;\r\n    });}\r\n    localStorage.setItem(\"stockData\",JSON.stringify(modifiedStockData));\r\n    \r\n    list.splice(index, 1);  // Deleting the portfolio by the index\r\n    this.setState({\r\n      users: list\r\n    })\r\n    localStorage.setItem(\"portfolio\", JSON.stringify(list));\r\n    \r\n    \r\n  }\r\n  // This function makes sure the component is mounted with the items from the local storage\r\n  componentWillMount() {\r\n    let data = localStorage.getItem(\"portfolio\");\r\n    \r\n    if(data!==null){\r\n    this.setState({\r\n      users: JSON.parse(data)\r\n    })}\r\n  }\r\n\r\n  //This function reset the input field for user to input new portfolio name\r\n  handleFormReset = () => {\r\n    this.setState(({\r\n      portfolioName:\"\"\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    const {users,portfolioName}=this.state; // getting the current state of portfolio array and the portfolio name\r\n    const isEnabled=this.state.portfolioName.length>0;// Checking if user has input any data to the input field to toggle it to enabled or disabled\r\n    return (\r\n      <div className=\"App\">\r\n       <form onSubmit={this.handleSubmit}>\r\n        <div className=\"portfolioAdd\">\r\n        <button disabled={!isEnabled} className=\"button buttonAdd\" type=\"submit\">Add new portfolio</button>\r\n          <input id=\"inputPorfolio\" type=\"text\" \r\n           value={portfolioName}\r\n           onChange={this.handlePortfolioName} \r\n           placeholder=\"Name of the portfolio\">\r\n           </input>\r\n         \r\n        </div>\r\n        </form>\r\n       \r\n        <div className=\"content\">\r\n          \r\n          {users.map((post,index)=>{ //Mapping all the data from the portfolio array to the display\r\n            return(\r\n              <Portfolio\r\n              // passing props to the portfolio component\r\n              key={post.id}\r\n              id={post.id}\r\n              name={post.portfolioName}\r\n              delete={this.handleDelete.bind(this,index,post.id)}\r\n              usersArray={this.state.users}></Portfolio>\r\n            )\r\n          })}\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n//import Graph from './components/graph'\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  //<Graph />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}